***ANSWER ALL OF THE QUESTIONS BELOW***

What is a programming language?
Answer: A programming language is a formal language used to write instructions for computers. It provides a set of rules
 and syntax for creating programs that can be executed or interpreted by a computer. Programming languages enable developers
 to express algorithms and logic in a structured way, allowing them to build software applications and automate tasks.

What is a JDK composed of? Define each components?
Answer: The JDK (Java Development Kit) is a software development environment used for developing Java applications.
        It includes several components:

        1. Java Compiler (javac): The Java compiler is responsible for translating Java source code into bytecode,
        which can be executed by the Java Virtual Machine (JVM).

        2. Java Runtime Environment (JRE): The JRE provides the necessary runtime environment to execute Java applications.
        It includes the JVM, libraries, and other runtime components required to run Java programs.

        3. Java Virtual Machine (JVM): The JVM is an integral part of the JDK. It is responsible for executing Java bytecode
        and providing a platform-independent runtime environment. The JVM handles memory management, garbage collection,
        and provides various runtime services to execute Java programs.

        4. Development Tools: The JDK includes several development tools that aid in Java application development.
        These tools include the Java Debugger (jdb) for debugging, Java Documentation Generator (javadoc) for generating
        API documentation, and other utilities for compiling, packaging, and managing Java projects.

        5. Java API Libraries: The JDK provides a rich set of libraries, known as the Java API (Application Programming
        Interface). These libraries contain pre-built classes and methods that developers can use to build Java applications.
        The Java API offers a wide range of functionality, including I/O operations, networking, database connectivity,
        GUI development, and more.

What is an IDE?
Answer: An IDE (Integrated Development Environment) is a software application that provides comprehensive tools and features
to assist developers in writing, testing, and debugging code. It is a central hub where developers can perform various tasks
related to software development within a single interface. IDEs are designed to enhance productivity and streamline the
development process.

What are some of the most popular Java IDEs available in the market?
Answer: Some of the most popular Java IDEs available in the market are:
        IntelliJ IDEA
        Eclipse
        NetBeans
        Visual Studio Code
        JDeveloper
        BlueJ

Explain the entire java life cycle.
Answer: The Java life cycle refers to the stages involved in the execution of a Java program. Here is an explanation of the
        Java life cycle:

        1. Writing and Compiling Java Code: The first stage is writing the Java code using a text editor or an Integrated
        Development Environment (IDE). Java source code files have the .java extension. Once the code is written, it needs
        to be compiled using the Java compiler (javac). The compiler converts the human-readable Java code into bytecode,
        which is a platform-independent format.

        2. Java Bytecode: The compiled Java code results in bytecode, which is a low-level representation of the program that
        can be executed by the Java Virtual Machine (JVM). Bytecode files have the .class extension.

        3. Java Virtual Machine (JVM): The JVM is a crucial component of the Java platform. It is responsible for executing
        the Java bytecode. The JVM provides a runtime environment that handles memory management, garbage collection, security,
        and other runtime services.

        4. Loading and Verifying Bytecode: The JVM loads the compiled bytecode into memory and performs verification to ensure
         the code adheres to the Java language specification and security requirements. This step ensures the bytecode is safe
         to execute.

        5. Executing Bytecode: The JVM starts executing the bytecode line by line. It interprets the bytecode instructions
        or may use Just-In-Time (JIT) compilation to optimize the performance of frequently executed code segments. JIT
        compilation dynamically translates bytecode into machine code for the host system.

        6. Runtime: During the runtime, the Java program performs its intended tasks. It may interact with the user, access
        databases, perform calculations, handle input and output operations, and more.

        7. Garbage Collection: The JVM manages memory allocation and deallocation through automatic garbage collection.
        It identifies and frees up memory that is no longer needed by the program. This helps prevent memory leaks and
        improves memory utilization.

        8. Program Termination: A Java program terminates when it reaches the end of its main method or encounters an
        explicit exit statement.

What is a class?
Answer: A class is a blueprint or a template for creating objects. It defines the properties (variables) and behaviors
(methods) that objects of that class will have. It serves as a blueprint from which objects are created, allowing multiple
instances (objects) to be created from a single class. Classes are the building blocks of object-oriented programming in
Java, providing encapsulation, inheritance, and polymorphism.

What is an object?
Answer: An object is an instance of a class. It represents a specific entity or thing based on the class blueprint. Objects
have state (data) and behavior (methods) defined by their class. They can store data in instance variables and perform
operations or actions using methods. Objects are created from a class using the "new" keyword and can interact with each
other by invoking methods or accessing variables. Each object has its own unique identity and can exist independently with
its own set of data and behavior.

What is the entry point of a Java project?
Answer: The entry point of a Java project is the main() method. It is a special method that serves as the starting point
of execution for a Java program.

Why is the main() method static?
Answer: The main() method is static because the static keyword indicates that the method belongs to the class itself,
rather than to an instance of the class. It allows the method to be called without creating an object of the class.

Which class is the superclass of all classes?
Answer: The superclass of all classes in Java is the Object class.The Object class is at the top of the class hierarchy
in Java and serves as the base class for all other classes. It provides a set of common methods and behaviors that are
inherited by all other classes

What is difference between path and classpath variables?
Answer: The PATH variable is used by the operating system to locate executables, while the CLASSPATH variable is used by
the Java Virtual Machine (JVM) to locate classes and resources for Java programs.

What is the difference between an Interface and Abstract class?
Answer: The main differences between Interface and Abstract class are:

        1. An interface only contains method signatures, while an abstract class can have both method declarations and
            method implementations.
        2. A class can implement multiple interfaces, but it can extend only one abstract class.
        3. Interfaces are used to define contracts and provide polymorphism, while abstract classes are used to provide
            common implementation and serve as a base for derived classes.

Can you make an Object from an Interface and Abstract class? If yes or no, how would you do it?
Answer: No, we cannot create objects directly from an interface or an abstract class in Java. Both interfaces and abstract
        classes are meant to be used as blueprints for creating derived classes.

        To create an object, we need to instantiate a concrete class that implements an interface or extends an abstract
        class. The concrete class provides the implementation for the abstract methods defined in the interface or
        abstract class. We can then create an object of that concrete class using the new keyword and use it to access
        the methods and properties defined in the interface or abstract class.

What is Access Modifier?
Answer: An access modifier is a keyword used to specify the accessibility or visibility of classes, variables, methods,
        and other members within a program. It determines which other parts of the program can access and interact with
        the declared element.

        There are four types of access modifiers in Java:
        1. Public
        2. Private
        3. Protected
        4. Default

What is OOP? Define each OOP concept.
Answer: OOP (Object-Oriented Programming) is a programming paradigm that organizes code into objects, which are instances
        of classes. It emphasizes the concept of objects and their interactions to create modular and reusable code.

        The key concepts of OOP:

        1. Class: A class is a blueprint or template that defines the structure and behavior of objects. It encapsulates
           data and methods that operate on that data. Objects are created from classes.

        2. Object: An object is an instance of a class. It represents a real-world entity or concept and has its own state
           (data) and behavior (methods). Objects can communicate with each other through method invocations.

        3. Encapsulation: Encapsulation is the bundling of data and methods within a class. It hides the internal details
           of an object and provides access to its data through methods, ensuring data integrity and protection. It helps
           achieve information hiding and modularity.

        4. Inheritance: Inheritance is a mechanism that allows a class to inherit properties and behaviors from another
           class called a superclass or base class. It promotes code reuse and supports the concept of hierarchical
           relationships among classes.

        5. Polymorphism: Polymorphism allows objects of different classes to be treated as objects of a common superclass.
           It enables methods to be invoked on objects of different types, providing flexibility and extensibility.
           Polymorphism is achieved through method overriding and method overloading.

        6. Abstraction: Abstraction focuses on defining the essential features of an object and hiding unnecessary details.
           It allows the creation of abstract classes and interfaces that provide a blueprint for subclasses. Abstraction
           helps in managing complexity and building modular and flexible systems.

What is Java Package and which package is imported by default?
Answer: A Java package is a way to organize and group related code entities. The 'java.lang' package is imported by default
        in every Java program.

What is an API? List some API's that you have used so far.
Answer: An API (Application Programming Interface) is a set of pre-defined functions, classes, and protocols that allows
        developers to interact with a software component or service. It provides a way for different software systems to
        communicate and exchange information.

Does java support multiple inheritance? Why or why not?
Answer: No, Java does not support multiple inheritance. Multiple inheritance refers to the ability of a class to inherit
        from more than one superclass. In Java, a class can only inherit from a single superclass. This design choice was
        made to avoid the complexities and potential issues that can arise from multiple inheritance.

What is method overloading? List all of the different ways to overload.
Answer: Method overloading is a feature in Java that allows a class to have multiple methods with the same name but different
        parameters. By overloading methods, we can define methods with similar functionality but different parameter lists,
        making the code more readable and flexible.

        The ways to overload methods:

        1. Different number of parameters: Methods can be overloaded by having a different number of parameters.
           For example:

        void sum(int a, int b)
        void sum(int a, int b, int c)

        2. Different data types of parameters: Methods can be overloaded by using different data types for parameters.
           For example:

        void printMessage(String message)
        void printMessage(int number)

        3. Different order of parameters: Methods can be overloaded by changing the order of parameters.
           For example:

        void findMax(int a, int b)
        void findMax(double a, int b)

        4. Different parameter type and order combined: Methods can be overloaded by combining different parameter types and orders.
           For example:

        void calculateArea(int length, int width)
        void calculateArea(double radius)

Explain exceptions in java and how to handle them.
Answer: Exceptions in Java are events that disrupt the normal flow of a program and represent errors or exceptional conditions.
        They can be checked or unchecked. Checked exceptions must be handled explicitly using try-catch blocks or declared
        to be thrown. Unchecked exceptions do not require explicit handling. Exceptions can be handled using try-catch blocks.
        Exceptions can also be propagated up the call stack or declared to be thrown in method signatures.

What is static keyword? When and how do we use it?
Answer: The static keyword in Java is used to define class-level members that are shared among all instances of a class.
        It can be applied to variables, methods, and nested classes. It allows accessing members without creating an object
        of the class and is useful for utility methods, constants, and organizing related entities.

What is final keyword? When and how do we use it?
Answer: The final keyword in Java is used to declare entities that cannot be changed or overridden. It can be used with
        variables, methods, and classes. When applied to a variable, it creates a constant value that cannot be modified.
        When applied to a method, it prevents the method from being overridden in subclasses. When applied to a class,
        it prevents the class from being subclassed. The final keyword is used to enforce immutability, preserve method
        behavior, and restrict class inheritance.

Explain the difference between final, finally and finalize?
Answer: The difference between final, finally and finalize are:

        1. final: The final keyword is used to declare a variable, method, or class as unchangeable or not overrideable.
           When applied to a variable, it creates a constant value. When applied to a method, it prevents the method from
           being overridden. When applied to a class, it prevents the class from being subclassed.

        2. finally: The finally block is used in exception handling to specify a block of code that will be executed
           regardless of whether an exception is thrown or not. It is placed after the try and catch blocks and ensures
           that certain code is always executed, even if an exception occurs.

        3. finalize: The finalize() method is a method defined in the Object class that is called by the garbage collector
           before reclaiming an object's memory. It is used for performing cleanup or resource release operations before
           an object is garbage collected.

What is a constructor?
Answer: A constructor is a special method in a class that is used to initialize objects of that class. It is called when
        an object of the class is created using the new keyword. The constructor has the same name as the class and does
        not have a return type.

Can we have multiple constructors in a class?
Answer:

If we don't have a constructor declared, what is called during the object creation?
Answer:

What is "this" keyword in Java? When would we use it?
Answer:

What is "super" keyword in Java? What are some scenarios we would use it?
Answer:

What does JVM stand for?
Answer:

Is JVM platform independent?
Answer:

What version of Java are you using?
Answer:

What does JAR stand for?
Answer:

What is the difference between JDK and JVM?
Answer:

What is the difference between JVM and JRE?
Answer:

Explain the difference between compile-time and run-time?
Answer:

What is heap?
Answer:

How does Java manage its memory?
Answer:

What is the difference between String, StringBuffer and StringBuilder?
Answer:

What is Singleton class?
Answer:

What is Serialization and Deserialization?
Answer:

Explain the difference between While and Do..While loops?
Answer:

What is Enum?
Answer:

What is Iterator?
Answer:

Which one will take more memory: an int or Integer? Why?
Answer:

Why are Strings considered to be immutable in Java?
Answer:

What is constructor chaining in Java?
Answer:

The difference between Serial and Parallel Garbage Collector?
Answer:

What does JIT stands for?
Answer:

Explain the process of Java garbage collection?
Answer:

Can you guarantee the garbage collection process?
Answer:

What is the difference between stack and heap in Java?
Answer:

What is reflection in Java and why is it useful?
Answer:

What is multithreading in Java?
Answer:

What is synchronization in Java?
Answer:

What is a Framework?
Answer:

What are the testing Frameworks available in Java?
Answer:

What are jUnit and testNG?
Answer:

What are the dependencies for this project?
Answer:

What is dependency injection in Java?
Answer:

Explain what static binding and dynamic binding is?
Answer: